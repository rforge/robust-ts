------------------------------------------------------------------------
"HOWTO": What you have to do to collaborate in 12 steps:
------------------------------------------------------------------------


%%%%%%%%%%%%%
(1) learn about R-forge
%%%%%%%%%%%%%
    
    download / read the r-forge manual (=RFM)
     http://r-forge.r-project.org/R-Forge_Manual.pdf
     (just 5 pages...)

%%%%%%%%%%%%%
(2)  prepare ssh - key
%%%%%%%%%%%%%
   
    unless already available generate an ssh-key
     to do so follow 3.1.1. 2.) /  3.1.2. 1.) & 2.)
     in RFM

%%%%%%%%%%%%%
(3) check availability of svn and ssh
%%%%%%%%%%%%%
      
       ---
      under Windows: install TortoiseSVN
       ---see 3.1.1 1.) RFM
       see also
      http://svnbook.red-bean.com/

%%%%%%%%%%%%%
(4) register as r-forge user
%%%%%%%%%%%%%
   
      http://r-forge.r-project.org/account/register.php

    if you want e-mails/ contributions to the corresponding
    forum to be forwarded to your "standard" mail address
    take care to check the corresponding option

%%%%%%%%%%%%%
(5) join "robust-ts" project
%%%%%%%%%%%%%

     go to the "robust-ts"-project summary in R-forge and
     click option "request to join" so that I can give you corresponding
     file access rights:

     http://r-forge.r-project.org/project/request.php?group_id=89

     after one of the project admin's has accepted your request 
     send the public part of your ssh key to r-forge;

     to do so follow 3.1.1. 2.) /  3.1.2. 1.) & 2.)
     in RFM

%%%%%%%%%%%%%
(6) prepare  your computer for svn-use / register checkout  folder
%%%%%%%%%%%%%

     create some folder locally on your computer where you want to
     be working on robust-ts ("working copy" of the archived folder)
  
     [under Windows] 
     after installation of TurtoiseSVN easily done with the context
     menu (right click!) within Windows Explorer:
      + use SVN- "Checkout"
      + in the field "Checkout directory" fill in the name of
         your (local) developer folder; 
      + in the field "URL of repository" enter
 
         svn+ssh://<your username in r-forge>@svn.r-forge.r-project.org/svnroot/robust-ts
 
     [under Linux]
     + use the command shell;
     + go to your local developing folder;
     + type in
   
    svn checkout svn+ssh://<your username in r-forge>@svn.r-forge.r-project.org/svnroot/robust-ts

    Your local folder now is registered as "Checkout" folder for the archived
    robust-ts- folder  under r-forge.
 
    After that you may simply get the newest version from r-forge
    using "update" , and you may send your modification to R-forge
    with "commit" (with context menu under Windows;
    with "svn update"/ "svn commit" under Linux)

    Note: svn is much more powerful than that  as to  taking  care
          of  consistency (in particular if several programmers are
          working on one file in parallel)  --- for
          details see
                    http://svnbook.red-bean.com/

%%%%%%%%%%%%%
(7) subscribe to the "commit list"
%%%%%%%%%%%%%

     in order to keep track with development done by others in the package
     subscribe to the corresponding "commit" mailing list; don't be afraid
     it is not a "high frequency" list...
     
     to do so follow the following steps:
         ->  go to the robust-ts page 
             http://r-forge.r-project.org/mail/?group_id=89
         ->  on the right bottom side go to item "mailing lists"
             and follow the link
         ->  click the corresponding subscribe/unsubscribe link
             http://lists.r-forge.r-project.org/cgi-bin/mailman/listinfo/robust-ts-commits
         ->  subscribe
         ->  you will get an automatic mail asking you to confirm the subscription
         ->  follow the link given in this mail to confirm the subscription 

     After subscription you will get a mail after each commit to the
     svn archive giving you the comment tag of the committer and a
     (possibly truncated) diff file.

     http://robust-ts.r-forge.r-project.org/

%%%%%%%%%%%%%
(8) read the package guidelines
%%%%%%%%%%%%%

     in the Banff workshop Nov 2006, we have worked out some
     programming guidelines for this package to provide
     a certain level of consistency within this package
     see

     http://robust-ts.r-forge.r-project.org/

%%%%%%%%%%%%%
(9) inscribe/ get inscribed into the target list
%%%%%%%%%%%%%

    To avoid double work, you should signal other collaborators that you are about to
    work on some topic of the list.
    How this list is maintained (automatically/manually) is still an open issue 
    (see open issue (3)). 
    For the moment send an e-mail to the admin (Peter Ruckdeschel) to insert / delete
    you; hopefully,  one day this can be done without the admin interfering.
  

%%%%%%%%%%%%%
(10) Collaborate
%%%%%%%%%%%%%

     under <your checkout-folder>/pkg    and
     under https://r-forge.r-project.org/plugins/scmsvn/viewcvs.php/pkg/?root=robust-ts 
     you will now find exactly the (sub-)folder structure of the R-package  "robust-ts"
     (R, man, inst, data, ....)

      any contributions are welcome

%%%%%%%%%%%%%
(11) HAPPY r-forging...
%%%%%%%%%%%%%
------------------------------------------------------------------------
   

%%%%%%%%%%%%%
(12) not so important to begin with: branches
%%%%%%%%%%%%%

     as the R-forge repository also is used to provide a source for installation
     of the devel-versions by non-developers, the "trunc" branch (for operational
     reasons, in R-forge this is the folder layer immediately below the main
     robust-ts project folder) should contain installable versions; also this is
     the only branch for which there is a build service on R-forge. 
     So the trunc branch should be reserved to (small) patches. 
     
     Larger/longer development lines should be done in the
     versioned branches (e.g. branches/robust-ts-1.0); on demand, we could also 
     think of developer indidividual branches (e.g. branches/robust-ts-bs,
     branches/robust-ts-do), but so far we have not seen the need for this. In 
     each of these branches, there is a complete (cheap) copy of the project tree; 
     here you can also put in "unready" things.
    
     From time to time, and after thorough checking (R CMD check should not find
     anything!) the devel branches should then be merged into the main trunc again
     by the svn merge command and a subsequent commit; this should be reserved
     to project admins, however.

